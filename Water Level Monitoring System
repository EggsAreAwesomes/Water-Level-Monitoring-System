/* Water Guard Home Page */

//Template 
#define BLYNK_TEMPLATE_ID "TMPL62Jww4yBe" 
#define BLYNK_TEMPLATE_NAME "Water Guard"  

//library 
#include <LiquidCrystal_PCF8574.h>
#define BLYNK_PRINT Serial
#include <ESP8266WiFi.h>
#include <BlynkSimpleEsp8266.h>

//LCD
LiquidCrystal_PCF8574 lcd(0x27);  

char auth[] = "IZEhGuK69Hr2q4o2W9dTFAZMjfKrbeT3"; 
char ssid[] = "Redmi 9C"; 
char pass[] = "637eb8ddbfa1";  

BlynkTimer timer;


#define trig D7
#define echo D8
#define LED1 D0
#define LED2 D3
#define LED3 D4
#define LED4 D5
#define LED5 D6
#define relay 3

//value (CM)
int MaxLevel = 20;

int Level1 = (MaxLevel * 75) / 100;
int Level2 = (MaxLevel * 65) / 100;
int Level3 = (MaxLevel * 55) / 100;
int Level4 = (MaxLevel * 45) / 100;
int Level5 = (MaxLevel * 35) / 100;

unsigned long previousMillis = 0; 
const long interval = 100;  

// String 
const char message1[] PROGMEM = "Water level";
const char message2[] PROGMEM = "Monitoring";

// Fungsi 
void printFromPROGMEM(const char* str) {
  while (pgm_read_byte(str) != '\0') {
    lcd.print((char)pgm_read_byte(str++));
  }
}

void setup() {
  Serial.begin(9600);
  lcd.begin(16, 2);  
  lcd.setBacklight(LOW);  
  pinMode(trig, OUTPUT);
  pinMode(echo, INPUT);
  pinMode(LED1, OUTPUT);
  pinMode(LED2, OUTPUT);
  pinMode(LED3, OUTPUT);
  pinMode(LED4, OUTPUT);
  pinMode(LED5, OUTPUT);
  pinMode(relay, OUTPUT);
  digitalWrite(relay, HIGH);
  Blynk.begin(auth, ssid, pass, "blynk.cloud", 80);

  //ke LCD
  lcd.setCursor(0, 0);
  printFromPROGMEM(message1);  
  lcd.setCursor(0, 1);
  printFromPROGMEM(message2);  
  
  delay(4000);
  lcd.clear();

  timer.setInterval(100L, ultrasonic); 
}

//sensor ultrasonic
void ultrasonic() {
  unsigned long currentMillis = millis();
  
  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis; 
    
    // Get distance
    digitalWrite(trig, LOW);
    delayMicroseconds(4);
    digitalWrite(trig, HIGH);
    delayMicroseconds(10);
    digitalWrite(trig, LOW);
    long t = pulseIn(echo, HIGH);
    int distance = t / 29 / 2;

    int blynkDistance = (distance - MaxLevel) * -1;
    if (distance <= MaxLevel) {
      Blynk.virtualWrite(V0, blynkDistance);
    } else {
      Blynk.virtualWrite(V0, 0);
    }

    lcd.setCursor(0, 0);
    lcd.print("WLevel:");

    if (Level1 <= distance) {
      lcd.setCursor(8, 0);
      lcd.print("Very Low");
      updateLED(1);  
    } else if (Level2 <= distance && Level1 > distance) {
      lcd.setCursor(8, 0);
      lcd.print("Low");
      updateLED(2);  
    } else if (Level3 <= distance && Level2 > distance) {
      lcd.setCursor(8, 0);
      lcd.print("Medium");
      updateLED(3);  
    } else if (Level4 <= distance && Level3 > distance) {
      lcd.setCursor(8, 0);
      lcd.print("High");
      updateLED(4);  
    } else if (Level5 >= distance) {
      lcd.setCursor(8, 0);
      lcd.print("Full");
      updateLED(5);  
    }
  }
}

//LED 
void updateLED(int level) {
  digitalWrite(LED1, level >= 1);
  digitalWrite(LED2, level >= 2);
  digitalWrite(LED3, level >= 3);
  digitalWrite(LED4, level >= 4);
  digitalWrite(LED5, level >= 5);
}

//value
BLYNK_WRITE(V1) {
  bool Relay = param.asInt();
  if (Relay == 1) {
    digitalWrite(relay, LOW);
    lcd.setCursor(0, 1);
    lcd.print("Motor is ON ");
  } else {
    digitalWrite(relay, HIGH);
    lcd.setCursor(0, 1);
    lcd.print("Motor is OFF");
  }
}

void loop() {
  Blynk.run();  
  timer.run();  
}
